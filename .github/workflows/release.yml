name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
    
    - name: Run linting
      run: |
        flake8 prusa_webcam_uploader.py --max-line-length=100
    
    - name: Run type checking
      run: |
        mypy prusa_webcam_uploader.py --ignore-missing-imports
    
    - name: Run tests
      run: |
        pytest --cov=prusa_webcam_uploader --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build-and-push-image]
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract changelog for this version
        if grep -q "## \[${{ steps.get_version.outputs.version_number }}\]" CHANGELOG.md; then
          awk '/## \[${{ steps.get_version.outputs.version_number }}\]/,/## \[/{if(/## \[/ && !/## \[${{ steps.get_version.outputs.version_number }}\]/) exit; print}' CHANGELOG.md > release_notes.md
        else
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes." >> release_notes.md
        fi
        
        # Add Docker image information
        echo "" >> release_notes.md
        echo "## 🐋 Docker Images" >> release_notes.md
        echo "" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version_number }}\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🚀 Quick Start" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Using Docker" >> release_notes.md
        echo "docker run --rm -it \\" >> release_notes.md
        echo "  --env-file .env \\" >> release_notes.md
        echo "  --add-host=host.docker.internal:host-gateway \\" >> release_notes.md
        echo "  ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version_number }}" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Using docker-compose" >> release_notes.md
        echo "wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/docker-compose.yml" >> release_notes.md
        echo "# Edit docker-compose.yml with your credentials" >> release_notes.md
        echo "docker-compose up -d" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
        files: |
          docker-compose.yml
          .env.template
          requirements.txt
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, build-and-push-image, create-release]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "🎉 Release ${{ needs.create-release.outputs.version || github.ref_name }} created successfully!"
        echo "📦 Docker images published to GitHub Container Registry"
        echo "📋 Release notes generated automatically"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
